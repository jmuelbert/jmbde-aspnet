---
name: Release

on:
    push:
        tags:
            - '*'


env:
    RUN_ID: build.${{ GITHUB.RUN_ID }}
    RUN_NUMBER: build.${{ GITHUB.RUN_NUMBER }}
    SHA: ${{ GITHUB.SHA }}
    MYGET_API_TOKEN: ${{ SECRETS.MYGET_API_TOKEN }}
    GITHUB_TOKEN: ${{ SECRETS.GITHUB_TOKEN }}

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
                  echo "::set-env name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"

    build:
        runs-on: windows-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Git fetch tags
              run: git fetch --tags

            - name: Check tags
              run: git tag -l -n

            - name: Setup dotnet 3.1.x sdk
              uses: actions/setup-dotnet@v1.7.2
              with:
                  dotnet-version: 3.1

            - name: Setup dotnet 5.0.x sdk
              uses: actions/setup-dotnet@v1.7.2
              with:
                  dotnet-version: 5.0.100-preview.7.20366.6

            - name: Check dotnet sdk install
              run: dotnet --info

            - name: Install dependencies
              run: dotnet restore

            - name: Build solution
              run: dotnet build -c Release --no-restore

            - name: Test solution
              run: dotnet test -c Release --no-build --no-restore --verbosity normal

            - name: Pack packages
              run: |
                  $LastTag =git describe --tags (git rev-list --tags --max-count=1)
                  echo "Last tag is: ${LastTag}"
                  $Version = ($LastTag).TrimStart('v').TrimEnd("beta").TrimEnd("preview")
                  echo "Publishing version: ${Version}"
                  $PackageVersion = ($LastTag).TrimStart('v') + "-" + $env:RUN_NUMBER + "." + $env:SHA.SubString(0, 7)
                  echo "Publishing package version: ${PackageVersion}"
                  dotnet pack -c Release -o packages /p:PackageVersion=$PackageVersion /p:Version=$Version --no-build
            - name: Publish artefacts
              uses: actions/upload-artifact@v2.2.1
              with:
                  name: "drop-ci-packages"
                  path: "./packages"

    release:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}
        name: release on ${{ matrix.config.os }} with portable ${{ matrix.config.portable-option }}
        runs-on: ${{ matrix.config.os }}

        strategy:
            fail-fast: false
            matrix:
                config:
                    - {os: ubuntu-latest }
                    - {os: windows-latest }
                    - {os: macos-latest}
        needs: build
        if: github.repository_owner == 'jmuelbert' && github.ref == 'refs/heads/master'
        strategy:
            fail-fast: false
        steps:
            - name: Setup dotnet 5.0.x sdk
              uses: actions/setup-dotnet@v1.7.2
              with:
                  dotnet-version: 5.0.100-preview.7.20366.6

            - name: Check dotnet sdk install
              run: dotnet --info

            - name: Download Artefact
              uses: actions/download-artifact@v2.0.8
              with:
                  name: "drop-ci-packages"

            - name: Add myget nuget source
              run: dotnet nuget add source https://www.myget.org/F/jmuelbert/api/v2/package --name myget.org

            - name: Push myget package
              run: dotnet nuget push .\drop-ci-packages\*.nupkg -s myget.org -k $env:MYGET_API_TOKEN --skip-duplicate

            - name: Add github nuget source
              run: dotnet nuget add source https://nuget.pkg.github.com/jmuelbert/index.json --name github.com --username jmuelbert --password $env:GITHUB_TOKEN

            - name: Push github package
              run: |
                  $count = 0;
                  do
                  {
                      ++$count;
                      dotnet nuget push .\drop-ci-packages\*.nupkg -s github.com --skip-duplicate;
                  }
                  while ($count -lt 3 -and $LastExitCode -ne 0)
                  $LastExitCode = 0;

            - name: Microsoft Application Inspector
              uses: microsoft/ApplicationInspector-Action@v1
              with:
                  name: AppInspectorResults
                  path: AppInspectorResults.json
