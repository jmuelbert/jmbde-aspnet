// <auto-generated />
using System;
using JMuelbert.BDE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace jmbde.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191225135920_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.ChipCard", b =>
                {
                    b.Property<long>("ChipCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Locked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(25);

                    b.HasKey("ChipCardId");

                    b.ToTable("ChipCard");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.ChipCardDoor", b =>
                {
                    b.Property<long>("ChipCardDoorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChipCardId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChipCardProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(25);

                    b.Property<long?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChipCardDoorId");

                    b.HasIndex("ChipCardId");

                    b.HasIndex("ChipCardProfileId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PlaceId");

                    b.ToTable("ChipCardDoor");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.ChipCardProfile", b =>
                {
                    b.Property<long>("ChipCardProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChipCardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(25);

                    b.HasKey("ChipCardProfileId");

                    b.HasIndex("ChipCardId");

                    b.ToTable("ChipCardProfile");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.CityName", b =>
                {
                    b.Property<long>("CityNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("CityNameId");

                    b.ToTable("CityName");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MailAddress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Name2")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<long?>("ZipCodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Computer", b =>
                {
                    b.Property<long>("ComputerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceNameId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Memory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Network")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("NetworkIpAddress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<long?>("OSSoftwareId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProcessorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Replace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("ServiceNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("ServiceTag")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.HasKey("ComputerId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DeviceNameId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("OSSoftwareId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ProcessorId");

                    b.ToTable("Computer");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Department", b =>
                {
                    b.Property<long>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<long?>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.DeviceName", b =>
                {
                    b.Property<long>("DeviceNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("DeviceNameId");

                    b.ToTable("DeviceName");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.DeviceType", b =>
                {
                    b.Property<long>("DeviceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("DeviceTypeId");

                    b.ToTable("DeviceType");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Document", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("DocumentData")
                        .HasColumnType("BLOB");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("DocumentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessMailAddress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<long?>("ChipCardDoorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChipCardId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChipCardProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DataCare")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployeeIdent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FaxId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeMailAddress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("HomeMobile")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("HomePhone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<long?>("JobTitleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MobileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PhoneId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("BLOB");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<long?>("ZipCodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ChipCardDoorId");

                    b.HasIndex("ChipCardId");

                    b.HasIndex("ChipCardProfileId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FaxId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("MobileId");

                    b.HasIndex("PhoneId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Fax", b =>
                {
                    b.Property<long>("FaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceNameId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Pin")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<long?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Replace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.HasKey("FaxId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DeviceNameId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Fax");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Inventory", b =>
                {
                    b.Property<long>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.HasKey("InventoryId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.JobTitle", b =>
                {
                    b.Property<long>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitle");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Manufacturer", b =>
                {
                    b.Property<long>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("HotlineNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MailAddress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Name2")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Street22")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Supporter")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<long?>("ZipCodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ManufacturerId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Mobile", b =>
                {
                    b.Property<long>("MobileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceNameId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Pin")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<long?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Replace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.HasKey("MobileId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DeviceNameId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Mobile");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Phone", b =>
                {
                    b.Property<long>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceNameId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Pin")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<long?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Replace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.HasKey("PhoneId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DeviceNameId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Place", b =>
                {
                    b.Property<long>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Desk")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("PlaceId");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Printer", b =>
                {
                    b.Property<long>("PrinterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceNameId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Network")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("NetworkIpAddress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int?>("PaperSize")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Replace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Resources")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("ServiceNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("ServiceTag")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.HasKey("PrinterId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DeviceNameId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Printer");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Processor", b =>
                {
                    b.Property<long>("ProcessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("ClockRate")
                        .HasColumnType("REAL");

                    b.Property<int>("Cores")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ProcessorId");

                    b.ToTable("Processor");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Software", b =>
                {
                    b.Property<long>("SoftwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ComputerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fix")
                        .HasColumnType("TEXT")
                        .HasMaxLength(25);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Revision")
                        .HasColumnType("TEXT")
                        .HasMaxLength(25);

                    b.Property<string>("Version")
                        .HasColumnType("TEXT")
                        .HasMaxLength(25);

                    b.HasKey("SoftwareId");

                    b.HasIndex("ComputerId");

                    b.ToTable("Software");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.SystemAccount", b =>
                {
                    b.Property<long>("SystemAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(25);

                    b.Property<long?>("SystemDataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("SystemAccountId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SystemDataId");

                    b.ToTable("SystemAccount");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.SystemData", b =>
                {
                    b.Property<long>("SystemDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Local")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("SystemDataId");

                    b.HasIndex("CompanyId");

                    b.ToTable("SystemData");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.WorkFunction", b =>
                {
                    b.Property<long>("WorkFunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<long?>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkFunctionId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkFunction");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.ZipCode", b =>
                {
                    b.Property<long>("ZipCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("Country")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.HasKey("ZipCodeId");

                    b.ToTable("ZipCode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.ChipCardDoor", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.ChipCard", null)
                        .WithMany("ChipCardDoor")
                        .HasForeignKey("ChipCardId");

                    b.HasOne("JMuelbert.BDE.Data.Models.ChipCardProfile", null)
                        .WithMany("ChipCardDoor")
                        .HasForeignKey("ChipCardProfileId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.ChipCardProfile", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.ChipCard", null)
                        .WithMany("ChipCardProfile")
                        .HasForeignKey("ChipCardId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Company", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("JMuelbert.BDE.Data.Models.ZipCode", "ZipCode")
                        .WithMany()
                        .HasForeignKey("ZipCodeId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Computer", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("JMuelbert.BDE.Data.Models.DeviceName", "DeviceName")
                        .WithMany()
                        .HasForeignKey("DeviceNameId");

                    b.HasOne("JMuelbert.BDE.Data.Models.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Employee", null)
                        .WithMany("Computer")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Software", "OS")
                        .WithMany()
                        .HasForeignKey("OSSoftwareId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Processor", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Document", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Employee", null)
                        .WithMany("Document")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Employee", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.ChipCardDoor", null)
                        .WithMany("Employee")
                        .HasForeignKey("ChipCardDoorId");

                    b.HasOne("JMuelbert.BDE.Data.Models.ChipCard", "ChipCard")
                        .WithMany("Employee")
                        .HasForeignKey("ChipCardId");

                    b.HasOne("JMuelbert.BDE.Data.Models.ChipCardProfile", null)
                        .WithMany("Employee")
                        .HasForeignKey("ChipCardProfileId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Fax", "Fax")
                        .WithMany("Employee")
                        .HasForeignKey("FaxId");

                    b.HasOne("JMuelbert.BDE.Data.Models.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Mobile", "Mobile")
                        .WithMany()
                        .HasForeignKey("MobileId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId");

                    b.HasOne("JMuelbert.BDE.Data.Models.ZipCode", "ZipCode")
                        .WithMany()
                        .HasForeignKey("ZipCodeId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Fax", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Department", "Department")
                        .WithMany("Fax")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("JMuelbert.BDE.Data.Models.DeviceName", "DeviceName")
                        .WithMany()
                        .HasForeignKey("DeviceNameId");

                    b.HasOne("JMuelbert.BDE.Data.Models.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Manufacturer", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.ZipCode", "ZipCode")
                        .WithMany()
                        .HasForeignKey("ZipCodeId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Mobile", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("JMuelbert.BDE.Data.Models.DeviceName", "DeviceName")
                        .WithMany()
                        .HasForeignKey("DeviceNameId");

                    b.HasOne("JMuelbert.BDE.Data.Models.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Phone", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("JMuelbert.BDE.Data.Models.DeviceName", "DeviceName")
                        .WithMany()
                        .HasForeignKey("DeviceNameId");

                    b.HasOne("JMuelbert.BDE.Data.Models.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Printer", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Department", "Department")
                        .WithMany("Printer")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("JMuelbert.BDE.Data.Models.DeviceName", "DeviceName")
                        .WithMany()
                        .HasForeignKey("DeviceNameId");

                    b.HasOne("JMuelbert.BDE.Data.Models.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Employee", "Employee")
                        .WithMany("Printer")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("JMuelbert.BDE.Data.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.Software", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Computer", null)
                        .WithMany("Software")
                        .HasForeignKey("ComputerId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.SystemAccount", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Employee", null)
                        .WithMany("SystemAccount")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("JMuelbert.BDE.Data.Models.SystemData", "SystemData")
                        .WithMany()
                        .HasForeignKey("SystemDataId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.SystemData", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("JMuelbert.BDE.Data.Models.WorkFunction", b =>
                {
                    b.HasOne("JMuelbert.BDE.Data.Models.Employee", null)
                        .WithMany("WorkFunction")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
